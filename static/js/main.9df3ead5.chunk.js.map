{"version":3,"sources":["assets/photos/DSC_5042-Bearbeitet.jpg","assets/icons/paypal.svg","assets/icons/instagram.svg","assets/icons/patreon.svg","assets/icons/kofi.svg","assets/icons/youtube.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","social","label","component","instagram","url","patreon","youtube","kofi","paypal","App","className","data-glitch","role","src","portrait","cite","map","item","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,+PCWrCC,EAAS,CACb,CACEC,MAAO,YACPC,UAAWC,IACXC,IAAK,iDAEP,CACEH,MAAO,UACPC,UAAWG,IACXD,IAAK,6CAEP,CACEH,MAAO,UACPC,UAAWI,IACXF,IAAK,8CAEP,CACEH,MAAO,QACPC,UAAWK,IACXH,IAAK,gCAEP,CACEH,MAAO,SACPC,UAAWM,IACXJ,IAAK,+CA0EMK,MAtEf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAChB,6BAASA,UAAU,QACjB,yBAAKA,UAAU,cACf,wBACEA,UAAU,qBACVC,cAAY,UAFd,YAWJ,6BAASC,KAAK,OAAOF,UAAU,QAC7B,6BAASA,UAAU,WACjB,yBACEA,UAAU,oBACVG,IAAKC,MAEP,yBAAKJ,UAAU,qBACb,gCACEK,KAAK,iCACLL,UAAU,wDAFZ,2BAI0B,6BAJ1B,qCAKoC,6BALpC,8BAM6B,6BAN7B,4BASA,gCACEK,KAAK,iCACLL,UAAU,wDAFZ,2BAI0B,6BAJ1B,wCAKuC,6BALvC,6BAM4B,6BAN5B,+CAWJ,6BAASA,UAAU,WACjB,wBAAIA,UAAU,cACVV,EAAOgB,KAAI,SAAAC,GAAI,OACjB,wBAAIP,UAAU,oBACZ,uBAAGQ,KAAMD,EAAKb,IAAKM,UAAU,0BAC3B,yBACEA,UAAU,gCACVG,IAAKI,EAAKf,YAEZ,uBAAGQ,UAAU,iCAAiCO,EAAKhB,cAM3D,4BAAQS,UAAU,UAChB,uBACEA,UAAU,eACVQ,KAAK,+BAFP,4BCvFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9df3ead5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DSC_5042-Bearbeitet.adcfb416.jpg\";","module.exports = __webpack_public_path__ + \"static/media/paypal.83720e79.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.662a4f14.svg\";","module.exports = __webpack_public_path__ + \"static/media/patreon.9adbc46c.svg\";","module.exports = __webpack_public_path__ + \"static/media/kofi.3b15f9a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.d57a47e1.svg\";","import React from 'react';\n\nimport './App.css';\n\nimport portrait from './assets/photos/DSC_5042-Bearbeitet.jpg';\nimport paypal from './assets/icons/paypal.svg';\nimport instagram from './assets/icons/instagram.svg';\nimport patreon from './assets/icons/patreon.svg';\nimport kofi from './assets/icons/kofi.svg';\nimport youtube from './assets/icons/youtube.svg';\n\nconst social = [\n  {\n    label: 'Instagram',\n    component: instagram,\n    url: 'https://www.instagram.com/yolanda.diefenbach/',\n  },\n  {\n    label: 'Patreon',\n    component: patreon,\n    url: 'https://www.patreon.com/yolandadiefenbach',\n  },\n  {\n    label: 'Youtube',\n    component: youtube,\n    url: 'https://www.youtube.com/user/yolinumberone',\n  },\n  {\n    label: 'Ko-fi',\n    component: kofi,\n    url: 'https://ko-fi.com/soyyolanda',\n  },\n  {\n    label: 'Paypal',\n    component: paypal,\n    url: 'https://www.paypal.com/paypalme/soyyolanda',\n  }\n]\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <section className=\"hero\">\n          <div className=\"hero__img\"></div>\n          <h1\n            className=\"hero__title glitch\"\n            data-glitch=\"Awake.\"\n          >Awake.</h1>\n        </section>\n      </header>\n      {/* <nav className=\"nav\">\n        <p className=\"nav__brand\">\n          Yolanda Diefenbach\n        </p>\n      </nav> */}\n      <section role=\"main\" className=\"main\">\n        <section className=\"content\">\n          <img\n            className=\"content__portrait\"\n            src={portrait}\n          />\n          <div className=\"animation-wrapper\">\n            <blockquote\n              cite=\"https://yolandadiefenbach.com/\"\n              className=\"content__quote animation-fade animation-fade--out-in\"\n            >\n              awake awake little grace<br />\n              awake awake bursted your silk case<br />\n              no limit infinte wast waits<br />\n              awake awake little grace\n            </blockquote>\n            <blockquote\n              cite=\"https://yolandadiefenbach.com/\"\n              className=\"content__quote animation-fade animation-fade--in-out\"\n            >\n              inhale inhale wide splay<br />\n              follow you wonderful pale lemon grace<br />\n              wayfare light years anyway<br />\n              live alive love be loved pale lemon grace\n            </blockquote>\n          </div>\n        </section>\n        <section className=\"content\">\n          <ul className=\"sociallist\">\n            { social.map(item => (\n            <li className=\"sociallist__item\">\n              <a href={item.url} className=\"sociallist__item__link\">\n                <img\n                  className=\"sociallist__item__link__image\"\n                  src={item.component}\n                />\n                <p className=\"sociallist__item__link__label\">{item.label}</p>\n              </a>\n            </li>\n            ))}\n          </ul>\n        </section>\n        <footer className=\"footer\">\n          <a\n            className=\"footer__item\"\n            href=\"mailto:hello@soyyolanda.com\"\n          >hello@soyyolanda.com</a>\n        </footer>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}