{"version":3,"sources":["assets/photos/DSC_5042-Bearbeitet.jpg","assets/icons/bandcamp.svg","assets/icons/instagram.svg","assets/icons/patreon.svg","assets/icons/spotify.svg","assets/icons/youtube.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","social","label","component","bandcamp","instagram","patreon","spotify","youtube","App","className","role","src","portrait","map","item","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,+PCWrCC,EAAS,CACb,CACEC,MAAO,WACPC,UAAWC,KAEb,CACEF,MAAO,YACPC,UAAWE,KAEb,CACEH,MAAO,UACPC,UAAWG,KAEb,CACEJ,MAAO,UACPC,UAAWI,KAEb,CACEL,MAAO,UACPC,UAAWK,MAoDAC,MAhDf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAChB,6BAASA,UAAU,QACjB,yBAAKA,UAAU,gBAInB,yBAAKA,UAAU,OACb,uBAAGA,UAAU,cAAb,uBAIF,6BAASC,KAAK,OAAOD,UAAU,QAC7B,6BAASA,UAAU,WACjB,yBACEA,UAAU,oBACVE,IAAKC,MAEP,uBAAGH,UAAU,kBAAb,8EAEF,6BAASA,UAAU,WACjB,wBAAIA,UAAU,cACVT,EAAOa,KAAI,SAAAC,GAAI,OACjB,wBAAIL,UAAU,oBACZ,uBAAGM,KAAK,IAAIN,UAAU,0BACpB,yBACEA,UAAU,gCACVE,IAAKG,EAAKZ,YAEZ,uBAAGO,UAAU,iCAAiCK,EAAKb,cAM3D,4BAAQQ,UAAU,UAChB,uBACEA,UAAU,eACVM,KAAK,uCAFP,oCC5DUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46d5be5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DSC_5042-Bearbeitet.adcfb416.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bandcamp.c5f9b870.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.662a4f14.svg\";","module.exports = __webpack_public_path__ + \"static/media/patreon.9adbc46c.svg\";","module.exports = __webpack_public_path__ + \"static/media/spotify.aee4e77e.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.d57a47e1.svg\";","import React from 'react';\n\nimport './App.css';\n\nimport portrait from './assets/photos/DSC_5042-Bearbeitet.jpg';\nimport bandcamp from './assets/icons/bandcamp.svg';\nimport instagram from './assets/icons/instagram.svg';\nimport patreon from './assets/icons/patreon.svg';\nimport spotify from './assets/icons/spotify.svg';\nimport youtube from './assets/icons/youtube.svg';\n\nconst social = [\n  {\n    label: 'Bandcamp',\n    component: bandcamp,\n  },\n  {\n    label: 'Instagram',\n    component: instagram,\n  },\n  {\n    label: 'Patreon',\n    component: patreon,\n  },\n  {\n    label: 'Spotify',\n    component: spotify,\n  },\n  {\n    label: 'Youtube',\n    component: youtube,\n  }\n]\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <section className=\"hero\">\n          <div className=\"hero__img\"></div>\n          {/* <h1 className=\"hero__title\">Yolanda Diefenbach</h1> */}\n        </section>\n      </header>\n      <nav className=\"nav\">\n        <p className=\"nav__brand\">\n          Yolanda Diefenbach\n        </p>\n      </nav>\n      <section role=\"main\" className=\"main\">\n        <section className=\"content\">\n          <img\n            className=\"content__portrait\"\n            src={portrait}\n          />\n          <q className=\"content__quote\">May we never stop inpiring our children. May we never stop being a child.</q>\n        </section>\n        <section className=\"content\">\n          <ul className=\"sociallist\">\n            { social.map(item => (\n            <li className=\"sociallist__item\">\n              <a href=\"#\" className=\"sociallist__item__link\">\n                <img\n                  className=\"sociallist__item__link__image\"\n                  src={item.component}\n                />\n                <p className=\"sociallist__item__link__label\">{item.label}</p>\n              </a>\n            </li>\n            ))}\n          </ul>\n        </section>\n        <footer className=\"footer\">\n          <a\n            className=\"footer__item\"\n            href=\"mailto:yolanda.diefenbach@gmail.com\"\n          >yolanda.diefenbach@gmail.com</a>\n        </footer>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}